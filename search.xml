<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c语言基础知识</title>
      <link href="/2024/04/01/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/04/01/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言基础知识"><a href="#C语言基础知识" class="headerlink" title="C语言基础知识"></a>C语言基础知识</h1><h2 id="volatile："><a href="#volatile：" class="headerlink" title="volatile："></a>volatile：</h2><p>​在当前线程内，当读取一个变量时，为了提高读取速度编译器会先把变量读取到一个寄存器中，再读取变量时就会直接从寄存器读取，当变量在本次线程改变时，会把改变后的变量值copy到该寄存器中，保持一致，当变量因为别的线程值发生改变，寄存器的值不会相应的改变，从而照成程序读取的值和实际变量值不一样，<br>volatile的作用就是不将变量读取到寄存器中，或者说每一次读取都是从内存中读取变量值，牺牲了一定的效率，但提升了正确率。</p><h2 id="子函数变量地址："><a href="#子函数变量地址：" class="headerlink" title="子函数变量地址："></a>子函数变量地址：</h2><p>有趣的发现：我在int Max_Arr(int arr[][4]); int Min_Arr(int arr[][4]);都定义了临时变量int line, row；由于数组特殊导致求最小值的时候if(min&gt;arr[i][j])逻辑表达式一直为false，if的语句块从未执行。变量line, row未被赋值。但实际输出居然和最大值的line， row值相同。</p><p>经过我的测试由于int Max_Arr(int arr[][4]);int Max_Arr(int arr[][4]);的临时变量数量相同，在Max_Arr()创建释放的line,row变量，在Min_Arr()创建变量时地址和Max_Arr()里的line, row地址一样。然而在int Min_Arr(int arr[][4])加入int a, b, c, d&#x3D;0;等无关变量后 line row地址改变。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Printf_Arr</span><span class="params">(<span class="type">int</span> arr[][<span class="number">4</span>])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Sum_Arr</span><span class="params">(<span class="type">int</span> arr[][<span class="number">4</span>])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Max_Arr</span><span class="params">(<span class="type">int</span> arr[][<span class="number">4</span>])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Max_Arr</span><span class="params">(<span class="type">int</span> arr[][<span class="number">4</span>])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Double_Arr</span><span class="params">(<span class="type">int</span> arr[][<span class="number">4</span>])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> arr[][<span class="number">4</span>] = &#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">Printf_Arr(arr);</span><br><span class="line">Sum_Arr(arr);</span><br><span class="line">Max_Arr(arr);</span><br><span class="line">Min_Arr(arr);</span><br><span class="line">Double_Arr(arr);</span><br><span class="line">Printf_Arr(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Printf_Arr</span><span class="params">(<span class="type">int</span> arr[][<span class="number">4</span>])</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Sum_Arr</span><span class="params">(<span class="type">int</span> arr[][<span class="number">4</span>])</span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)&#123;</span><br><span class="line">sum += arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Max_Arr</span><span class="params">(<span class="type">int</span> arr[][<span class="number">4</span>])</span>&#123;</span><br><span class="line"><span class="type">int</span> max = arr[<span class="number">0</span>][<span class="number">0</span>], line, row;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(max&lt;arr[i][j])&#123;</span><br><span class="line">line = i+<span class="number">1</span>;</span><br><span class="line">row = j+<span class="number">1</span>;</span><br><span class="line">max = arr[i][j];&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d line:%d, adress:%d, row:%d, adress:%d\n&quot;</span>,max, line,&amp;line, row,&amp;row);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Min_Arr</span><span class="params">(<span class="type">int</span> arr[][<span class="number">4</span>])</span>&#123;</span><br><span class="line"><span class="type">int</span> a, b, c, d=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> min = arr[<span class="number">0</span>][<span class="number">0</span>], line, row;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(min&gt;arr[i][j])&#123;</span><br><span class="line">line = i+<span class="number">1</span>;</span><br><span class="line">row = j+<span class="number">1</span>;</span><br><span class="line">min = arr[i][j];&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d line:%d, adress:%d, row:%d, adress:%d\n&quot;</span>,min, line,&amp;line, row,&amp;row);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Double_Arr</span><span class="params">(<span class="type">int</span> arr[][<span class="number">4</span>])</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)&#123;</span><br><span class="line">arr[i][j] *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="数组作为形参传递不同点："><a href="#数组作为形参传递不同点：" class="headerlink" title="数组作为形参传递不同点："></a>数组作为形参传递不同点：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="comment">// 地址传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> *arr)</span>;</span><br></pre></td></tr></table></figure><h3 id="int-salary-与-int-arr-作为形参传入函数的不同点："><a href="#int-salary-与-int-arr-作为形参传入函数的不同点：" class="headerlink" title="int salary 与 int arr[]作为形参传入函数的不同点："></a>int salary 与 int arr[]作为形参传入函数的不同点：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">demo</span><span class="params">(<span class="type">int</span> *num)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> salary, arr[<span class="number">5</span>];</span><br><span class="line">    demo(&amp;salary); <span class="comment">//此时需要取地址</span></span><br><span class="line">    demo(arr);<span class="comment">//不需要取地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="两数交换代码例子"><a href="#两数交换代码例子" class="headerlink" title="两数交换代码例子"></a>两数交换代码例子</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> data;</span><br><span class="line">   data = a;</span><br><span class="line">   a = b;</span><br><span class="line">   b = data;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;swap函数中a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;           </span><br><span class="line">   <span class="type">int</span> a = <span class="number">20</span>;</span><br><span class="line">   <span class="type">int</span> b = <span class="number">30</span>;</span><br><span class="line">   swap(a,b);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;main函数中a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">   system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​从上面代码运行结果可以知道，在swap函数中将a、b的值已经交换了，但是在main函数中调用swap函数后a、b的值并没有交换。<br>这是因为swap函数的生存周期为调用swap函数那一刻到swap函数执行完这一时间段，swap函数中的a和b是在调用时临时开辟的空间swap执行完空间就释放了，什么都没有了，就算在swap函数中将形式参数a、b的值交换了，但是main函数中的值并没有交换。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span>* b)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> data;</span><br><span class="line">   data = *a;</span><br><span class="line">   *a = *b;</span><br><span class="line">   *b = data;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;swap函数中a = %d b = %d\n&quot;</span>,*a,*b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;           </span><br><span class="line">   <span class="type">int</span> a = <span class="number">20</span>;</span><br><span class="line">   <span class="type">int</span> b = <span class="number">30</span>;</span><br><span class="line">   swap(&amp;a,&amp;b);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;main函数中a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">   system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="/2024/04/01/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86" alt="image-20240402102017812"></p><p>从运行结果可以看出main函数和swap函数的a和b的值都已经交换了，这是为什么呢？<br>从代码中可以看出调用swap函数时实际参数传递的是a和b的地址，形式参数为两个int型的指针变量a和b，分别指向实际参数a和b的地址,在swap函数中进行的交换操作是直接访问的main函数中的a和b的值，所以就算swap函数的空间释放了main函数中a和b的值已经通过swap函数进行交换了。<br>即通过指针可以在子函数中改变main函数的值</p><p>原文链接：<a href="https://blog.csdn.net/qq_48458789/article/details/112743244">https://blog.csdn.net/qq_48458789/article/details/112743244</a></p><h3 id="教学例子"><a href="#教学例子" class="headerlink" title="教学例子"></a>教学例子</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  THRESHOLD_FIRST *Salary-*Salary*0.2 -3500</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  THRESHOLD_SECOND *Salary-7662*0.2-3500</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  BOUNDARY 7662</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Tax</span><span class="params">(<span class="type">int</span> *Salary, <span class="type">int</span> *tax)</span>;<span class="comment">//此次主要是想求出个税tax，只传入已知的Salary那么只能通过Tax（）函数的return获取tax，再加一个变量传入tax的地址，函数Tax（）释放后，主函数内的tax值已被修改。</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> Salary, tax;  <span class="comment">//Salary税前薪资， tax个税</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入您的工资数额:&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Salary);</span><br><span class="line">Tax(&amp;Salary,&amp;tax); <span class="comment">//传入Salary,tax的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n您因缴纳的个税为%d&quot;</span>,tax);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Tax</span><span class="params">(<span class="type">int</span> *Salary,<span class="type">int</span> *tax)</span>&#123;</span><br><span class="line"><span class="type">int</span> Five_One;</span><br><span class="line">Five_One = *Salary&lt;BOUNDARY ? THRESHOLD_FIRST : THRESHOLD_SECOND;</span><br><span class="line"><span class="keyword">if</span>(Five_One&lt;=<span class="number">1500</span>)&#123;</span><br><span class="line">*tax = Five_One*<span class="number">0.03</span> - <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Five_One&lt;=<span class="number">4500</span>)&#123;</span><br><span class="line">*tax = Five_One*<span class="number">0.1</span> <span class="number">-105</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Five_One&lt;=<span class="number">9000</span>)&#123;</span><br><span class="line">*tax = Five_One*<span class="number">0.2</span> <span class="number">-555</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *tax;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="目前的问题不解："><a href="#目前的问题不解：" class="headerlink" title="目前的问题不解："></a>目前的问题不解：</h2><p>当我定义指针，再传入地址就会报错，如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Tax</span><span class="params">(<span class="type">int</span> *Salary, <span class="type">int</span> *tax)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *Salary, *tax;</span><br><span class="line">Tax(&amp;Salary,&amp;tax);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确格式：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Tax</span><span class="params">(<span class="type">int</span> *Salary, <span class="type">int</span> *tax)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> Salary, tax;</span><br><span class="line">Tax(&amp;Salary,&amp;tax);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCC编译与GDB调试</title>
      <link href="/2024/03/30/Gcc%E7%BC%96%E8%AF%91%E4%B8%8EGdb%E8%B0%83%E8%AF%95/"/>
      <url>/2024/03/30/Gcc%E7%BC%96%E8%AF%91%E4%B8%8EGdb%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="GCC编译与GDB调试"><a href="#GCC编译与GDB调试" class="headerlink" title="GCC编译与GDB调试"></a>GCC编译与GDB调试</h1><h2 id="一-gcc"><a href="#一-gcc" class="headerlink" title="一.gcc"></a>一.gcc</h2><h3 id="1-gcc简介："><a href="#1-gcc简介：" class="headerlink" title="1.gcc简介："></a>1.gcc简介：</h3><p>​gcc命令使用GNU推出的基于C&#x2F;C++的编译器，是开放源代码领域应用最广泛的编译器，具有功能强大，编译代码支持性能优化等特点。</p><p>​gcc是GNU编译器套件（GNU Compiler Collection），它包括了C、C++、Objective-C、Fortran、Java、Ada、Go语言和D语言的前端，也包括了这些语言的库（如libstdc++、libgcj等等）。GCC的初衷是为GNU操作系统专门编写的一款编译器。GNU系统是彻底的自由软件。此处，“自由”的含义是它尊重用户的自由。</p><h3 id="2-gcc编译链接过程"><a href="#2-gcc编译链接过程" class="headerlink" title="2.gcc编译链接过程"></a>2.gcc编译链接过程</h3><p>（1）预编译：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">`gcc -e main.c -o main.i <span class="comment">//-o选项用来指定输出文件的文件名 </span></span><br></pre></td></tr></table></figure><p>（2）编译：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -s main.i -o main.s</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc test001.c test002.c -o test  <span class="comment">//将test001.c和test002.c分别编译后连接成test可执行文件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用技巧</title>
      <link href="/2024/03/29/Hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2024/03/29/Hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设知识总结</title>
      <link href="/2024/03/28/%E6%AF%95%E8%AE%BE%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2024/03/28/%E6%AF%95%E8%AE%BE%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 毕设 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
